openapi: 3.1.0
info:
  title: Zahlungsdaten-API
  version: 1.1.1
  description: |
    Zahlungsdaten Upload-API und optionalem Batching.
    - **POST /upload: Neuen Upload anlegen
    - **PUT /upload/{uploadId}/items: Batch-Upload (mehrere Items zu einer VSL)
    - **GET /upload/{uploadId}: Fortschritt & Diagnose eines Uploads
    - **GET /upload: Fortschritt & Diagnose aller Uploads

tags:
  - name: upload
    description: Uploads & Items

paths:
  /zahlungsdaten-api/v1/upload:
    post:
      tags: [ upload ]
      summary: Neuen Upload initiieren – erzeugt eine neue serverseitige Upload-Session. Pro Upload können n Datensätze zu genau einer VSL-Nummer übertragen werden. Beim Start erfolgt die Berechtigungsprüfung des Bewirtschafters für den angegebenen Verarbeitungsschlüssel (VSL). Der Upload wird automatisch abgeschlossen, sobald alle übermittelten Zahlungsdatensätze erfolgreich verarbeitet wurden.
      operationId: initUpload
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UploadInitRequest'
            examples:
              init:
                value:
                  bewNr: "123456789"
                  vslNummer: "vsl00001"
                  anzahlDatensaetzeInsgesamt: 3
                  erstellungsdatum: "2025-07-04T10:00:00Z"
      responses:
        '201':
          description: Upload angelegt
          headers:
            Location:
              description: Resource-URI des Uploads
              schema:
                type: string
                example: /uploads/3f7a2c5e-2a8b-4b6a-9f2d-1a2b3c4d5e6f
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadInitResponse'
        '400':
          description: Ungültiger Init-Body
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
    get:
      tags: [ upload ]
      summary: Status einsehen – Fortschritt- & Diagnosedaten zu allen Uploads
      operationId: getAllUploadsStatus
      responses:
        '200':
          description: Statusliste aller Uploads (leer, wenn keine vorhanden)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadStatusListResponse'
              examples:
                example:
                  value:
                    total: 2
                    items:
                      - uploadId: "11111111-1111-1111-1111-111111111111"
                        uploadStatus: "ACTIVE"
                        expected: 3
                        received: 2
                        pending: 2
                        processing: 0
                        done: 0
                        error: 0
                        missingSequence: [ 3 ]
                        errorSequence: [ ]
                      - uploadId: "22222222-2222-2222-2222-222222222222"
                        uploadStatus: "SEALED"
                        expected: 5
                        received: 5
                        pending: 0
                        processing: 0
                        done: 5
                        error: 0
                        missingSequence: [ ]
                        errorSequence: [ ]

  /zahlungsdaten-api/v1/upload/{uploadId}/items:
    put:
      tags: [ upload ]
      summary: Upload von n Zahlungsdatensätzen für die angegebene uploadId – Die VSL-Datensätze (Items) werden in Batches von 1 bis n pro Request übertragen. Jedes Item enthält eine fortlaufende Nummer (seqNo) sowie den zugehörigen VSL-Payload. Fehlerhafte Items können bei Bedarf erneut hochgeladen werden.
      operationId: uploadBatch
      parameters:
        - name: uploadId
          in: path
          required: true
          description: ID des Uploads (UUID)
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              minItems: 1
              items:
                $ref: '#/components/schemas/ItemUploadRequest'
            examples:
              example:
                value:
                  - { seqNo: 1, payload: { betrag: 100 } }
                  - { seqNo: 2, payload: { betrag: 200 } }
      responses:
        '200':
          description: Batch verarbeitet (Ergebnis pro Item)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchUploadResponse'
        '400':
          description: Ungültiger Batch (z. B. leer, zu groß, seqNo out of range)
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
        '404':
          description: Unbekannte uploadId
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
        '409':
          description: Konflikt (Upload-Zustand oder Item-Konflikt auf Gesamtebene)
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
        '410':
          description: Upload Gültigkeitszeitraum abgelaufen (expired)
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }

  /zahlungsdaten-api/v1/upload/{uploadId}:
    get:
      tags: [ upload ]
      summary: Status einsehen – Fortschritt- & Diagnosedaten zu einem Upload
      operationId: getUploadStatus
      parameters:
        - name: uploadId
          in: path
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Status des Uploads
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadStatusResponse'
              examples:
                example:
                  value:
                    uploadId: "3f7a2c5e-2a8b-4b6a-9f2d-1a2b3c4d5e6f"
                    uploadStatus: "SEALED"
                    expected: 3
                    received: 3
                    pending: 0
                    processing: 0
                    done: 3
                    error: 0
                    missingSequence: [ ]
                    errorSequence: [ ]
        '404':
          description: Unbekannte uploadId
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }

components:
  schemas:
    UploadInitRequest:
      type: object
      required: [ bewNr, vslNummer, anzahlDatensaetzeInsgesamt ]
      properties:
        bewNr:
          type: string
          description: Fachlicher Absender/Ident
          example: "123456789"
        vslNummer:
          type: string
          description: Eindeutige VSL-Kennung dieses Uploads
          example: "vsl00001"
        anzahlDatensaetzeInsgesamt:
          type: integer
          minimum: 1
          description: Erwartete Anzahl Items (expected)
          example: 3
        erstellungsdatum:
          type: string
          format: date-time
          nullable: true
          description: Optional (ISO-8601)
          example: "2025-07-04T10:00:00Z"

    UploadInitResponse:
      type: object
      required: [ uploadId, status, createdAt, expiresAt, vslNummer, expected ]
      properties:
        uploadId:
          type: string
          description: ID des Uploads (UUID)
          example: "3f7a2c5e-2a8b-4b6a-9f2d-1a2b3c4d5e6f"
        status:
          $ref: '#/components/schemas/UploadSessionStatus'
        createdAt:
          type: string
          format: date-time
          example: "2025-09-03T14:00:00"
        expiresAt:
          type: string
          format: date-time
          example: "2025-09-03T16:00:00"
        vslNummer:
          type: string
          example: "vsl00001"
        expected:
          type: integer
          example: 3

    ItemUploadRequest:
      type: object
      required: [ seqNo, payload ]
      properties:
        seqNo:
          type: integer
          minimum: 1
          description: Laufende Nummer innerhalb des Uploads (1..expected)
          example: 1
        payload:
          description: Freies JSON-Objekt eines einzelnen Datensatzes
          oneOf:
            - type: object
              additionalProperties: true
            - type: string
          example:
            betrag: 100
      description: |
        Hinweis: Wenn der Server intern als String speichert, kann `payload` dennoch als JSON-Objekt geliefert werden.
        Serverseitig wird dieses dann serialisiert (z. B. via JsonNode#toString()).

    BatchUploadResultStatus:
      type: string
      enum: [ ACCEPTED, REUPLOADED, CONFLICT, INVALID ]

    BatchUploadResult:
      type: object
      required: [ seqNo, status ]
      properties:
        seqNo:
          type: integer
          example: 1
        status:
          $ref: '#/components/schemas/BatchUploadResultStatus'
        message:
          type: string
          nullable: true
          example: "re-uploaded from ERROR"

    BatchUploadResponse:
      type: object
      required: [ uploadId, results ]
      properties:
        uploadId:
          type: string
          example: "3f7a2c5e-2a8b-4b6a-9f2d-1a2b3c4d5e6f"
        results:
          type: array
          items:
            $ref: '#/components/schemas/BatchUploadResult'

    UploadStatusResponse:
      type: object
      required:
        [ uploadId, uploadStatus, expected, received, pending, processing, done, error, missingSequence, errorSequence ]
      properties:
        uploadId:
          type: string
          example: "3f7a2c5e-2a8b-4b6a-9f2d-1a2b3c4d5e6f"
        uploadStatus:
          $ref: '#/components/schemas/UploadSessionStatus'
        expected:
          type: integer
          description: Anzahl laut InitUpload
          example: 3
        received:
          type: integer
          description: Anzahl bereits angekommener Items (egal welcher Status)
          example: 3
        pending:
          type: integer
          example: 0
        processing:
          type: integer
          example: 0
        done:
          type: integer
          example: 3
        error:
          type: integer
          example: 0
        missingSequence:
          type: array
          description: Laufende Nummern (1..expected), zu denen **kein** Item existiert
          items: { type: integer }
          example: [ ]
        errorSequence:
          type: array
          description: Laufende Nummern von Items im Status **ERROR**
          items: { type: integer }
          example: [ ]

    UploadStatusListResponse:
      type: object
      description: Aggregierter Status über alle (optionalen Filter entsprechend) Uploads.
      properties:
        total:
          type: integer
          description: Anzahl gefundener Uploads (entspricht items.length)
          example: 2
        items:
          type: array
          description: Liste der Upload-Statusobjekte
          items:
            $ref: '#/components/schemas/UploadStatusResponse'
      required: [ total, items ]

    UploadSessionStatus:
      type: string
      enum: [ ACTIVE, SEALED, COMPLETED, ABORTED ]

    Error:
      type: object
      properties:
        status:
          type: integer
          example: 409
        error:
          type: string
          example: "Conflict"
        message:
          type: string
          example: "item already exists"
